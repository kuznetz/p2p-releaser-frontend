/* tslint:disable */
/* eslint-disable */
/**
 * Releaser
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IRelease,
    IReleaseFromJSON,
    IReleaseToJSON,
    IReleaseFull,
    IReleaseFullFromJSON,
    IReleaseFullToJSON,
    TagResponse,
    TagResponseFromJSON,
    TagResponseToJSON,
} from '../models';

export interface InnerReleasesControllerCreateRequest {
    iRelease: IRelease;
}

export interface InnerReleasesControllerGetByIdRequest {
    id: string;
}

export interface InnerReleasesControllerListRequest {
    authorId?: string;
    tag?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Создать новый блок из json
     */
    async innerReleasesControllerCreateRaw(requestParameters: InnerReleasesControllerCreateRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.iRelease === null || requestParameters.iRelease === undefined) {
            throw new runtime.RequiredError('iRelease','Required parameter requestParameters.iRelease was null or undefined when calling innerReleasesControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/inner/releases/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IReleaseToJSON(requestParameters.iRelease),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Создать новый блок из json
     */
    async innerReleasesControllerCreate(requestParameters: InnerReleasesControllerCreateRequest): Promise<string> {
        const response = await this.innerReleasesControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Получить инфоблок в виде json по id
     */
    async innerReleasesControllerGetByIdRaw(requestParameters: InnerReleasesControllerGetByIdRequest): Promise<runtime.ApiResponse<IReleaseFull>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling innerReleasesControllerGetById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inner/releases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IReleaseFullFromJSON(jsonValue));
    }

    /**
     * Получить инфоблок в виде json по id
     */
    async innerReleasesControllerGetById(requestParameters: InnerReleasesControllerGetByIdRequest): Promise<IReleaseFull> {
        const response = await this.innerReleasesControllerGetByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Получить теги релизов
     */
    async innerReleasesControllerGetTagsRaw(): Promise<runtime.ApiResponse<Array<TagResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inner/releases/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagResponseFromJSON));
    }

    /**
     * Получить теги релизов
     */
    async innerReleasesControllerGetTags(): Promise<Array<TagResponse>> {
        const response = await this.innerReleasesControllerGetTagsRaw();
        return await response.value();
    }

    /**
     * Получить список id по параметрам
     */
    async innerReleasesControllerListRaw(requestParameters: InnerReleasesControllerListRequest): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        if (requestParameters.authorId !== undefined) {
            queryParameters['authorId'] = requestParameters.authorId;
        }

        if (requestParameters.tag !== undefined) {
            queryParameters['tag'] = requestParameters.tag;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inner/releases/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Получить список id по параметрам
     */
    async innerReleasesControllerList(requestParameters: InnerReleasesControllerListRequest): Promise<Array<string>> {
        const response = await this.innerReleasesControllerListRaw(requestParameters);
        return await response.value();
    }

}
